#################################################################################################################
# A docker environment for FASTAI v0.7
# References:
# https://github.com/Paperspace/fastai-docker/blob/master/fastai-v2/Dockerfile
#################################################################################################################

FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

#################################################################################################################
#           Global
#################################################################################################################

ENV LANG C.UTF-8

#################################################################################################################
#           TINI
#################################################################################################################

ENV TINI_VERSION v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini

#################################################################################################################
#           SYSTEM
#################################################################################################################
# label that nvidia-docker will detect and then mount the driver files (https://github.com/NVIDIA/nvidia-docker/issues/410)
LABEL com.nvidia.volumes.needed="nvidia_driver"

# compute cuda repo for ubuntu1804
RUN echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list

RUN apt-get update && apt-get install -y --no-install-recommends --allow-downgrades --allow-change-held-packages \
         build-essential \
         cmake \
         git \
         wget \
         vim \
         ca-certificates \
         libnccl2=2.2.13-1+cuda9.0 \
         libnccl-dev=2.2.13-1+cuda9.0 \
         python-qt4 \
         libjpeg-dev \
         zip \
         unzip \
         bzip2 \
         libpng-dev 

ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64        

#################################################################################################################
#           CONDA
#################################################################################################################

# add conda to path
ARG CONDA_DIR=/opt/conda
ENV PATH $CONDA_DIR/bin:$PATH

# Install miniconda
ENV PYTHON_VERSION=3.6
RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh  && \
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
    /opt/conda/bin/conda install conda-build
    
# Add the following channels to the bottom of the channel queue
RUN conda config --append channels conda-forge

#################################################################################################################
#           FASTAI
#################################################################################################################

# clone fastai repo
RUN git clone --single-branch --branch v0.7.1 https://github.com/fastai/fastai.git /usr/local/fastai

# pin torchtext version (see https://forums.fast.ai/t/google-colab-attributeerror-module-torch-has-no-attribute-float32/25327)
RUN sed -i -e 's/torchtext/torchtext==0.2.3/' /usr/local/fastai/environment.yml

# install fastai environment
RUN cd /usr/local/fastai && conda env update -f environment.yml 

#################################################################################################################
#           OTHER PACKAGES
#################################################################################################################

RUN conda install -n fastai \
            scikit-learn \
            bcolz

#################################################################################################################
#           JUPYTER 
# Notes
# * multiple GPUs, you can point notebook servers to each device using CUDA_DEVICE_ORDER and CUDA_VISIBLE_DEVICES 
#   (see https://github.com/MattKleinsmith/dockerfiles/blob/master/fastai/Dockerfile)
#################################################################################################################

# Add a notebook profile.
# 1. set default working directory
RUN mkdir -p -m 700 /root/.jupyter/ && \
    echo "c.NotebookApp.notebook_dir = '/'" >> /root/.jupyter/jupyter_notebook_config.py

# Open port
EXPOSE 8888

#################################################################################################################
#           System CleanUp
#################################################################################################################
# apt-get autoremove: used to remove packages that were automatically installed to satisfy dependencies for some 
# package and that are no more needed. 
# apt-get clean: removes the aptitude cache in /var/cache/apt/archives. The only drawback is that the packages 
# have to be downloaded again if you reinstall them.

RUN apt-get autoremove -y && apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    conda clean -i -l -t -y

#################################################################################################################
#           START UP
#################################################################################################################

VOLUME /home
WORKDIR /home

ENTRYPOINT [ "/tini", "--" ]

CMD /bin/bash -c "source activate fastai && jupyter notebook --ip='0.0.0.0' --allow-root --no-browser --NotebookApp.password='sha1:a60ff295d0b9:506732d050d4f50bfac9b6d6f37ea6b86348f4ed'"

